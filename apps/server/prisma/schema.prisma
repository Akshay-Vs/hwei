generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region Store

model Store {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  icon      String    @db.VarChar(100)
  isActive  Boolean   @default(true)
  version   Int       @default(1)
  userId    String    @db.VarChar(64)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products   Product[]
  brands     Brand[]
  categories Category[]
  currencies Currency[]
  orders     Order[]
  carts      Cart[]
  wishlists  Wishlist[]

  @@unique([userId, name])
  @@index([userId, isActive, deletedAt])
}

//#endregion

//#region Product

model Product {
  id          String         @id @default(cuid())
  storeId     String
  store       Store          @relation(fields: [storeId], references: [id])
  title       String         @db.VarChar(200)
  description String         @db.Text
  minOrder    Int
  maxOrder    Int
  brandId     String
  brand       Brand          @relation(fields: [brandId], references: [id])
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  tags                ProductTag[]
  variantLabels       VariantLabel[]
  variantCombinations VariantCombination[]
  cartItems           CartItem[]
  wishlistItems       WishlistItem[]

  @@index([storeId, deletedAt])
  @@index([brandId])
  @@index([categoryId])
}

//#endregion

//#region Product Images

model ProductImage {
  id        String  @id @default(cuid())
  imageUrl  String  @db.VarChar(255)
  imageAlt  String? @db.VarChar(255)
  sortOrder Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId, sortOrder])
}

//#endregion

//#region Brand & Category

model Brand {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  image       String?   @db.VarChar(255)
  description String?   @db.Text
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  products    Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(100)
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

//#endregion

//#region Tags

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique @db.VarChar(50)
  products ProductTag[]
}

model ProductTag {
  id        String @id @default(cuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([productId, tagId])
  @@index([tagId, productId])
}

//#endregion

//#region Variants

model VariantLabel {
  id           String          @id @default(cuid())
  name         String          @db.VarChar(50)
  hasThumbnail Boolean
  sortOrder    Int
  productId    String
  product      Product         @relation(fields: [productId], references: [id])
  options      VariantOption[]

  @@index([productId, sortOrder])
}

model VariantOption {
  id             String                     @id @default(cuid())
  name           String                     @db.VarChar(100)
  thumbnail      String?                    @db.VarChar(255)
  sortOrder      Int
  variantLabelId String
  labelOwner     VariantLabel               @relation(fields: [variantLabelId], references: [id])
  combinations   VariantCombinationOption[]

  @@index([variantLabelId, sortOrder])
}

model VariantCombination {
  id        String    @id @default(cuid())
  productId String
  sku       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  product       Product                    @relation(fields: [productId], references: [id])
  options       VariantCombinationOption[]
  pricing       VariantPricing?
  inventory     VariantInventory?
  promotions    VariantPromotion[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  @@index([productId, deletedAt])
  @@index([sku])
}

model VariantPricing {
  id            String             @id @default(cuid())
  combinationId String             @unique
  price         Int
  currencyId    String
  variant       VariantCombination @relation(fields: [combinationId], references: [id])
  currency      Currency           @relation(fields: [currencyId], references: [id])

  @@index([currencyId])
}

model VariantInventory {
  id            String             @id @default(cuid())
  combinationId String             @unique
  stock         Int
  variant       VariantCombination @relation(fields: [combinationId], references: [id])

  @@index([stock])
}

model VariantCombinationOption {
  id            String             @id @default(cuid())
  combinationId String
  optionId      String
  combination   VariantCombination @relation(fields: [combinationId], references: [id])
  option        VariantOption      @relation(fields: [optionId], references: [id])

  @@unique([combinationId, optionId])
  @@index([optionId, combinationId])
}

//#endregion

//#region Currency

model Currency {
  id       String           @id @default(cuid())
  code     String           @db.VarChar(3)
  label    String           @db.VarChar(50)
  symbol   String           @db.VarChar(10)
  storeId  String
  store    Store            @relation(fields: [storeId], references: [id])
  pricings VariantPricing[]
  orders   Order[]

  @@unique([storeId, code])
  @@index([storeId])
}

//#endregion

//#region Promotions

model Promotion {
  id           String       @id @default(cuid())
  name         String       @db.VarChar(100)
  description  String?      @db.Text
  discountType DiscountType
  value        Int
  minPurchase  Int?
  maxPurchase  Int?
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  scopes       PromotionScope[]
  variantLinks VariantPromotion[]

  @@index([startDate, endDate])
}

model PromotionScope {
  id          String    @id @default(cuid())
  promotionId String
  scopeType   ScopeType
  targetId    String

  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@index([scopeType, targetId])
  @@index([promotionId])
}

model VariantPromotion {
  id            String @id @default(cuid())
  combinationId String
  promotionId   String

  variant   VariantCombination @relation(fields: [combinationId], references: [id])
  promotion Promotion          @relation(fields: [promotionId], references: [id])

  @@unique([combinationId, promotionId])
  @@index([promotionId])
}

//#endregion

//#region Orders

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @db.VarChar(50)
  storeId         String
  userId          String      @db.VarChar(64)
  status          OrderStatus @default(PENDING)
  currencyId      String
  subtotal        Int // Locked at order time
  discount        Int         @default(0) // Locked at order time
  tax             Int         @default(0) // Locked at order time
  shippingCost    Int         @default(0) // Locked at order time
  total           Int // Locked at order time
  shippingAddress Json? // Stores address snapshot
  billingAddress  Json? // Stores address snapshot
  notes           String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  store    Store       @relation(fields: [storeId], references: [id])
  currency Currency    @relation(fields: [currencyId], references: [id])
  items    OrderItem[]

  @@index([storeId, userId, status])
  @@index([storeId, createdAt])
  @@index([userId, createdAt])
  @@index([orderNumber])
}

model OrderItem {
  id            String @id @default(cuid())
  orderId       String
  productId     String
  combinationId String
  quantity      Int
  unitPrice     Int // Locked price at order time
  discount      Int    @default(0) // Locked discount at order time
  total         Int // Locked total at order time
  snapshot      Json // Stores product/variant details at order time

  order   Order              @relation(fields: [orderId], references: [id])
  variant VariantCombination @relation(fields: [combinationId], references: [id])

  @@index([orderId])
  @@index([combinationId])
}

//#endregion

//#region Cart

model Cart {
  id        String   @id @default(cuid())
  storeId   String
  userId    String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store      @relation(fields: [storeId], references: [id])
  items CartItem[]

  @@unique([storeId, userId])
  @@index([userId])
}

model CartItem {
  id            String   @id @default(cuid())
  cartId        String
  productId     String
  combinationId String
  quantity      Int
  addedAt       DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cart    Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product            @relation(fields: [productId], references: [id])
  variant VariantCombination @relation(fields: [combinationId], references: [id])

  @@unique([cartId, combinationId])
  @@index([cartId])
}

//#endregion

//#region Wishlist

model Wishlist {
  id        String   @id @default(cuid())
  storeId   String
  userId    String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store          @relation(fields: [storeId], references: [id])
  items WishlistItem[]

  @@unique([storeId, userId])
  @@index([userId])
}

model WishlistItem {
  id            String   @id @default(cuid())
  wishlistId    String
  productId     String
  combinationId String?
  addedAt       DateTime @default(now())

  wishlist Wishlist            @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product             @relation(fields: [productId], references: [id])
  variant  VariantCombination? @relation(fields: [combinationId], references: [id])

  @@unique([wishlistId, productId, combinationId])
  @@index([wishlistId])
}

//#endregion

enum ScopeType {
  GLOBAL
  BRAND
  CATEGORY
  PRODUCT
  VARIANT
}

enum DiscountType {
  FIXED
  PERCENTAGE

  @@map("discount_type")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED

  @@map("order_status")
}

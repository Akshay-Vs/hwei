generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region User

model User {
  id        String  @id @default(cuid())
  clerkId   String  @unique @db.VarChar(64)
  email     String  @unique @db.VarChar(255)
  firstName String? @db.VarChar(255)
  lastName  String? @db.VarChar(255)
  avatar    String? @db.VarChar(255)

  status UserStatus @default(ACTIVE)
  role   Role       @default(USER)

  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  // Computed fields
  fullName String? @db.VarChar(255)

  orders    Order[]
  carts     Cart[]
  wishlists Wishlist[]
  Address   Address[]
  Store     Store[]

  @@unique([clerkId, email])
  @@index([clerkId, email, deletedAt])
}

//#endregion

//#region Store

model Store {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  icon      String    @db.VarChar(100)
  isActive  Boolean   @default(true)
  version   Int       @default(1)
  userId    String    @db.VarChar(64)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products   Product[]
  brands     Brand[]
  categories Category[]
  currencies Currency[]
  orders     Order[]
  carts      Cart[]
  wishlists  Wishlist[]

  // relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, name])
  @@index([userId, isActive, deletedAt])
}

//#endregion

//#region Product

model Product {
  id          String         @id @default(cuid())
  storeId     String
  store       Store          @relation(fields: [storeId], references: [id])
  title       String         @db.VarChar(200)
  description String         @db.Text
  minOrder    Int
  maxOrder    Int
  brandId     String
  brand       Brand          @relation(fields: [brandId], references: [id])
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  // Computed fields
  variantCount    Int       @default(0) // Count of active variants
  lowestPrice     Int? // Min price across all variants
  highestPrice    Int? // Max price across all variants
  totalStock      Int       @default(0) // Sum of all variant stock
  hasStock        Boolean   @default(false) // Any variant in stock?
  primaryImage    String?   @db.VarChar(255) // First image URL (cached)
  lastStockUpdate DateTime? // Track when stock was last updated

  tags                ProductTag[]
  variantLabels       VariantLabel[]
  variantCombinations VariantCombination[]
  cartItems           CartItem[]
  wishlistItems       WishlistItem[]

  @@index([storeId, deletedAt, hasStock])
  @@index([storeId, lowestPrice, deletedAt])
  @@index([storeId, createdAt])
  @@index([brandId, deletedAt])
  @@index([categoryId, deletedAt])
}

//#endregion

//#region Product Images

model ProductImage {
  id        String  @id @default(cuid())
  imageUrl  String  @db.VarChar(255)
  imageAlt  String? @db.VarChar(255)
  sortOrder Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId, sortOrder])
}

//#endregion

//#region Brand & Category

model Brand {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  image       String?   @db.VarChar(255)
  description String?   @db.Text
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  products    Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(100)
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id])
  products Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

//#endregion

//#region Tags

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique @db.VarChar(50)
  products ProductTag[]
}

model ProductTag {
  id        String @id @default(cuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([productId, tagId])
  @@index([tagId, productId])
}

//#endregion

//#region Variants

model VariantLabel {
  id           String          @id @default(cuid())
  name         String          @db.VarChar(50)
  hasThumbnail Boolean
  sortOrder    Int
  productId    String
  product      Product         @relation(fields: [productId], references: [id])
  options      VariantOption[]

  @@index([productId, sortOrder])
}

model VariantOption {
  id             String                     @id @default(cuid())
  name           String                     @db.VarChar(100)
  thumbnail      String?                    @db.VarChar(255)
  sortOrder      Int
  variantLabelId String
  labelOwner     VariantLabel               @relation(fields: [variantLabelId], references: [id])
  combinations   VariantCombinationOption[]

  @@index([variantLabelId, sortOrder])
}

model VariantCombination {
  id        String    @id @default(cuid())
  productId String
  sku       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  product       Product                    @relation(fields: [productId], references: [id])
  options       VariantCombinationOption[]
  pricing       VariantPricing?
  inventory     VariantInventory?
  promotions    VariantPromotion[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  // Computed fields
  displayLabel String? @db.VarChar(200) // "Large / Red / Cotton" - precomputed

  @@index([productId, deletedAt])
  @@index([sku])
}

model VariantPricing {
  id            String             @id @default(cuid())
  combinationId String             @unique
  price         Int
  currencyId    String
  variant       VariantCombination @relation(fields: [combinationId], references: [id])
  currency      Currency           @relation(fields: [currencyId], references: [id])

  // Computed fields
  currencyCode   String? @db.VarChar(3) // "USD" - cached from Currency
  currencySymbol String? @db.VarChar(10) // "$" - cached from Currency

  @@index([currencyId])
}

model VariantInventory {
  id            String             @id @default(cuid())
  combinationId String             @unique
  stock         Int
  variant       VariantCombination @relation(fields: [combinationId], references: [id])

  @@index([stock])
}

model VariantCombinationOption {
  id            String             @id @default(cuid())
  combinationId String
  optionId      String
  combination   VariantCombination @relation(fields: [combinationId], references: [id])
  option        VariantOption      @relation(fields: [optionId], references: [id])

  @@unique([combinationId, optionId])
  @@index([optionId, combinationId])
}

//#endregion

//#region Currency

model Currency {
  id       String           @id @default(cuid())
  code     String           @db.VarChar(3)
  label    String           @db.VarChar(50)
  symbol   String           @db.VarChar(10)
  storeId  String
  store    Store            @relation(fields: [storeId], references: [id])
  pricings VariantPricing[]
  orders   Order[]

  @@unique([storeId, code])
  @@index([storeId])
}

//#endregion

//#region Promotions

model Promotion {
  id           String       @id @default(cuid())
  name         String       @db.VarChar(100)
  description  String?      @db.Text
  discountType DiscountType
  value        Int
  minPurchase  Int?
  maxPurchase  Int?
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  scopes       PromotionScope[]
  variantLinks VariantPromotion[]

  @@index([startDate, endDate])
}

model PromotionScope {
  id          String    @id @default(cuid())
  promotionId String
  scopeType   ScopeType
  targetId    String

  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@index([scopeType, targetId])
  @@index([promotionId])
}

model VariantPromotion {
  id            String @id @default(cuid())
  combinationId String
  promotionId   String

  variant   VariantCombination @relation(fields: [combinationId], references: [id])
  promotion Promotion          @relation(fields: [promotionId], references: [id])

  @@unique([combinationId, promotionId])
  @@index([promotionId])
}

//#endregion

//#region Address
model Address {
  id        String   @id @default(cuid())
  userId    String   @db.VarChar(64)
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  address1  String   @db.VarChar(255)
  address2  String?  @db.VarChar(255)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(100)
  zip       String   @db.VarChar(20)
  country   String   @db.VarChar(2) // ISO 3166-1 alpha-2
  phone     String   @db.VarChar(20) // E.164 format max 15 + prefix
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true) // Soft delete
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ordersAsShipping Order[] @relation("ShippingAddress")
  ordersAsBilling  Order[] @relation("BillingAddress")

  @@index([userId, isActive])
  @@index([userId, isDefault])
}

//#endregion

//#region Orders
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique @db.VarChar(50)
  storeId     String
  userId      String      @db.VarChar(64)
  status      OrderStatus @default(PENDING)
  currencyId  String
  notes       String?     @db.Text

  // Financial amounts in smallest currency unit (cents/paise)
  subtotal     Int @default(0)
  shippingCost Int @default(0)
  taxAmount    Int @default(0)
  discount     Int @default(0)
  totalAmount  Int // itemsSubtotal - totalDiscount + shipping + tax

  // stripe payment references
  stripePaymentIntentId String? @unique @db.VarChar(255)
  stripeChargeId        String? @db.VarChar(255)
  stripeCustomerId      String? @db.VarChar(255)

  paymentStatus PaymentStatus @default(PENDING)

  // refunds
  amountPaid     Int @default(0)
  amountRefunded Int @default(0)

  // Address references
  billingAddressId  String
  shippingAddressId String

  // Timestamps
  paidAt      DateTime?
  shippedAt   DateTime?
  deliveredAt DateTime?
  cancelledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Computed snapshots
  shippingAddressSnapshot Json?
  billingAddressSnapshot  Json?

  stripeWebhookLog Json? // Store raw webhook data
  calculationLog   Json? // Store how you calculated total

  // Relations
  store           Store       @relation(fields: [storeId], references: [id])
  currency        Currency    @relation(fields: [currencyId], references: [id])
  shippingAddress Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Restrict)
  billingAddress  Address     @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: Restrict)
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  // Optimized indexes for common queries
  @@index([storeId, status, createdAt(sort: Desc)])
  @@index([userId, status, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([storeId, userId])
  @@index([createdAt(sort: Desc)])
}

model OrderItem {
  id            String @id @default(cuid())
  orderId       String
  productId     String
  combinationId String
  quantity      Int
  unitPrice     Int // Locked price at order time
  discount      Int    @default(0) // Locked discount at order time
  total         Int // Locked total at order time
  snapshot      Json // Stores product/variant details at order time

  order   Order              @relation(fields: [orderId], references: [id])
  variant VariantCombination @relation(fields: [combinationId], references: [id])

  @@index([orderId])
  @@index([combinationId])
}

//#endregion

//#region Cart

model Cart {
  id        String   @id @default(cuid())
  storeId   String
  userId    String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store      @relation(fields: [storeId], references: [id])
  items CartItem[]
  User  User       @relation(fields: [userId], references: [id])

  @@unique([storeId, userId])
  @@index([userId])
}

model CartItem {
  id            String   @id @default(cuid())
  cartId        String
  productId     String
  combinationId String
  quantity      Int
  addedAt       DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cart    Cart               @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product            @relation(fields: [productId], references: [id])
  variant VariantCombination @relation(fields: [combinationId], references: [id])

  @@unique([cartId, combinationId])
  @@index([cartId])
}

//#endregion

//#region Wishlist

model Wishlist {
  id        String   @id @default(cuid())
  storeId   String
  userId    String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items WishlistItem[]
  User  User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storeId, userId])
  @@index([storeId, userId])
}

model WishlistItem {
  id            String   @id @default(cuid())
  wishlistId    String
  productId     String
  combinationId String?
  addedAt       DateTime @default(now())

  wishlist Wishlist            @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product             @relation(fields: [productId], references: [id])
  variant  VariantCombination? @relation(fields: [combinationId], references: [id])

  @@unique([wishlistId, productId, combinationId])
  @@index([wishlistId])
}

//#endregion

enum ScopeType {
  GLOBAL
  BRAND
  CATEGORY
  PRODUCT
  VARIANT
}

enum DiscountType {
  FIXED
  PERCENTAGE

  @@map("discount_type")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED

  @@map("order_status")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@map("user_status")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  USER
}

enum PaymentStatus {
  PENDING // Order created, no payment
  PROCESSING // Payment initiated
  REQUIRES_ACTION // 3D Secure required
  SUCCEEDED // Payment successful
  FAILED // Payment failed
  PARTIALLY_REFUNDED
  REFUNDED
  DISPUTED // Chargeback
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#region Store

model Store {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  icon      String    @db.VarChar(100)
  isActive  Boolean   @default(true)
  version   Int       @default(1)
  userId    String    @db.VarChar(64)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products   Product[]
  brands     Brand[]
  categories Category[]
  currencies Currency[]

  @@unique([userId, name])
  @@index([userId])
  @@index([slug])
}

//#endregion

//#region Product

model Product {
  id          String         @id @default(cuid())
  storeId     String
  store       Store          @relation(fields: [storeId], references: [id], onDelete: Cascade)
  title       String         @db.VarChar(200)
  description String         @db.Text
  minOrder    Int
  maxOrder    Int
  brandId     String
  brand       Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?

  tags                ProductTag[]
  variantLabels       VariantLabel[]
  variantCombinations VariantCombination[]

  @@unique([storeId, id])
  @@index([title])
  @@index([brandId])
  @@index([categoryId])
}

//#endregion

//#region Product Images
model ProductImage {
  id        String  @id @default(cuid())
  imageUrl  String  @db.VarChar(255)
  imageAlt  String? @db.VarChar(255)
  sortOrder Int
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([id, productId])
  @@index([productId, sortOrder])
}

//#endregion

//#region Brand & Category

model Brand {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(100)
  image       String?   @db.VarChar(255)
  description String?   @db.Text
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products    Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(100)
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([storeId, name])
  @@index([storeId])
}

//#endregion

//#region Tags

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique @db.VarChar(50)
  products ProductTag[]
}

model ProductTag {
  id        String @id @default(cuid())
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([tagId])
  @@index([productId])
}

//#endregion

//#region Variants

model VariantLabel {
  id           String          @id @default(cuid())
  name         String          @db.VarChar(50)
  hasThumbnail Boolean
  sortOrder    Int
  productId    String
  product      Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  options      VariantOption[]

  @@index([productId, sortOrder])
}

model VariantOption {
  id             String                     @id @default(cuid())
  name           String                     @db.VarChar(100)
  thumbnail      String?                    @db.VarChar(255)
  sortOrder      Int
  variantLabelId String
  labelOwner     VariantLabel               @relation(fields: [variantLabelId], references: [id], onDelete: Cascade)
  combinations   VariantCombinationOption[]

  @@index([variantLabelId, sortOrder])
}

model VariantCombination {
  id        String    @id @default(cuid())
  productId String
  sku       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  product    Product                    @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    VariantCombinationOption[]
  pricing    VariantPricing?
  inventory  VariantInventory?
  promotions VariantPromotion[]

  @@index([productId])
}

model VariantPricing {
  id            String             @id @default(cuid())
  combinationId String             @unique
  price         Int
  currencyId    String
  variant       VariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  currency      Currency           @relation(fields: [currencyId], references: [id])

  @@index([currencyId])
}

model VariantInventory {
  id            String             @id @default(cuid())
  combinationId String             @unique
  stock         Int
  variant       VariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)

  @@index([stock])
}

model VariantCombinationOption {
  id            String             @id @default(cuid())
  combinationId String
  optionId      String
  combination   VariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  option        VariantOption      @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@unique([combinationId, optionId])
  @@index([optionId, combinationId])
}

//#endregion

//#region Currency
model Currency {
  id       String           @id @default(cuid())
  code     String           @unique @db.VarChar(3) // ISO 4217 currency code (USD, EUR, etc.)
  label    String           @db.VarChar(50)
  symbol   String           @db.VarChar(10)
  storeId  String
  store    Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  pricings VariantPricing[]

  @@unique([storeId, code])
  @@index([storeId])
}

//#endregion

//#region Promotions
model Promotion {
  id           String       @id @default(cuid())
  name         String       @db.VarChar(100)
  description  String?      @db.Text
  discountType DiscountType
  value        Int
  minPurchase  Int?
  maxPurchase  Int?
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  scopes       PromotionScope[]
  variantLinks VariantPromotion[]

  @@index([startDate, endDate])
}

model PromotionScope {
  id          String    @id @default(cuid())
  promotionId String
  scopeType   ScopeType
  targetId    String

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@index([scopeType, targetId])
  @@index([promotionId])
}

model VariantPromotion {
  id            String @id @default(cuid())
  combinationId String
  promotionId   String

  variant   VariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  promotion Promotion          @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@unique([combinationId, promotionId])
  @@index([promotionId])
}

//#endregion

enum ScopeType {
  GLOBAL
  BRAND
  CATEGORY
  PRODUCT
  VARIANT
}

enum DiscountType {
  FIXED
  PERCENTAGE

  @@map("discount_type")
}
